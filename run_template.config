#This configuration file will be imported in python and sets up the parameters for deriving the PSF. For each run, adapt this configuration file to your needs. 
#As this file will be imported, you can use all python commands to define arrays.

import numpy as np


general =             { 'folder_run':                     '/data/sjh/datasets/2021_PSF_general_GPU/testrun_github/',
                        'files_occulted':                 '',             #'/data/sjh/datasets/2021_PSF_general_GPU/theoretical/original/artificial_image1.fits'  
                        'file_psf_existing':              '',
                        'resolution':                     1024,           
                        'n_iterations':                   3,
                        'large_psf':                      False, 
                        'use_gpu':                        True }

testrun =             { 'PSF_testrun':                    True,
                        'PSF_shape':                      ['gaussian_core', 'circle'],
                        'occmask_shape':                  ['large_hole'],
                        'occmask_size_largehole':         250,    
                        'occmask_size_pinholes':          7,
                        'occmask_n_pinholes':             49,
                        'occmask_signaltonoise':          0 }

psf_discretization =  { 'psfdisc_file':                   '',              
                        'shape':                          'shells',        #shells or shell_segments
                        'radius_segments_edges':          [0, .1, .6, 1.2, 1.8, 2.4, 3.0, 3.6, 4.2, 4.8, 5.6, 6.0, 7.2, 9., 12., 15., 18., 24., 
                                                           *np.logspace(np.log10(30.), np.log10(np.sqrt(2) * general['resolution']), num = 20)],       
                        'width_segments_angle':           180 }             #only if shape == shell_segments

occultation_mask =    { 'method':                         'threshold',     #'predefined', 'threshold'
                        'occ_file':                       '',             
                        'threshold':                      0.1,
                        'threshold_usemedian':            False } 
                        
importance_mask =    {  'method':                         'psf_segmentation',     #'psf_segmentation', 'distances', 'predefined'
                        'importance_file':                       '',             
                        'distance_edges':                 psf_discretization['radius_segments_edges'] }
                                        
deconvolution =       { 'n_iterations':                   100,
                        'pad':                            True }
                                              
system_of_equations = { 'n_px_occulted':                  'max',            
                        'n_px_illuminatededge':           1000,           
                        'dist_from_illuminatededge':      10,            
                        'n_px_illuminated':               0,              
                        'n_illuminated_bins':             10,            
                        'rebin_occulted':                 [1],           
                        'rebin_dist_occulted':            [0, np.sqrt(2) * general['resolution']]}      

fitting =             { 'fit_function':                   'multilinear_cpu',
                        'n_fit_repetitions':              1,
                        'n_samples_occulted':             10000,
                        'n_samples_illuminatededge':      0,
                        'n_samples_illuminated':          0,
                        'only_use_best_fraction':         .5,
                        'split_training_evaluation':      .5,
                        'regularization_alpha':           .001,
                        'fit_repetition_chunksize':       10,
                        'tolerance':                      1e-10, 
                        'max_iter':                       1000}

postprocessing =      { 'n_smooth_iterations':            1000 }

